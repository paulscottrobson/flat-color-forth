              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2018-12-14 07:59:14
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th December 2018
              	;		Purpose :	Flat Color Forth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	;
              	;		Page allocation. These need to match up with those given in the page table
              	;		in data.asm
              	;													
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	FirstSourcePage = $22 								; first page of 512 byte source pages
0004:         	SourcePageCount = 4 								; number of source pages (32 pages/page)
0200:         	EditPageSize = 512 									; bytes per edit page.
002A:         	FirstCodePage = $22+SourcePageCount*2 				; first code page.
              	;
              	;		Memory allocated from the Unused space in $4000-$7FFF
              	;
7B08:         	EditBuffer = $7B08 									; $7B00-$7D1F 512 byte edit buffer
7EFC:         	StackTop = $7EFC 									;      -$7EFC Top of stack
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: 9E8B    			dw 		SystemInformation 
              	
8006: 31FC7E  	Boot:	ld 		sp,StackTop							; reset Z80 Stack
8009: F3      			di											; disable interrupts
              		
800A: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
800E: 3E2A    			ld 		a,FirstCodePage 					; get the page to start
8010: CD4E83  			call 	PAGEInitialise
              	
8013: AF      			xor 	a 									; set Mode 0 (standard 48k Spectrum + Sprites)
8014: CDE281  			call 	GFXMode
8017: C32385  			jp 		BUFFScan 							; scan the buffers
              	
              			include "support/command.asm" 				; command line stuff
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		command.asm
              	;		Purpose:	Command line code
              	;		Date : 		12th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
801A:         	CommandLineStart:
801A: 21D380  			ld 		hl,__CLIWelcome
801D: 0E05    			ld 		c,5
801F: 1809    			jr 		WarmStartSetup
8021:         	WarmStart:
8021: 21E480  			ld 		hl,__CLIWarmStart
8024: 0E04    			ld 		c,4
8026: 1802    			jr 		WarmStartSetup
8028:         	ErrorHandler:										; error routines.
8028: 0E02    			ld 		c,2
802A:         	WarmStartSetup:
802A: 31FC7E  			ld 		sp,StackTop							; reset Z80 Stack
              	
802D: 3E2A    			ld 		a,FirstCodePage 					; reset the paging system
802F: CD4E83  			call 	PAGEInitialise
8032: E5      			push 	hl 									; save error message
              	
8033: 2AB68B  			ld 		hl,(__DIScreenSize) 				; clear the 2nd line
8036: 11C0FF  			ld 		de,-64
8039: 19      			add 	hl,de
803A: 0620    			ld 		b,32
803C:         	__CLIClear:
803C: 112001  			ld 		de,$0120
803F: CD1782  			call 	GFXWriteCharacter
8042: 23      			inc 	hl
8043: 10F7    			djnz 	__CLIClear
              	
8045: 2AB68B  			ld 		hl,(__DIScreenSize) 				; half way down 2nd line.
8048: 11D0FF  			ld 		de,-48
804B: 19      			add 	hl,de
              	
804C: 51      			ld 		d,c 								; colour in D
804D: C1      			pop 	bc 									; text in BC
804E:         	__CLIPrompt: 										; write prompt / message / etc.
804E: 0A      			ld 		a,(bc)
804F: B7      			or 		a
8050: 280B    			jr 		z,__CLIPromptExit
8052: FA5D80  			jp 		m,__CLIPromptExit
8055: 5F      			ld 		e,a
8056: CD1782  			call 	GFXWriteCharacter
8059: 03      			inc 	bc
805A: 23      			inc 	hl
805B: 18F1    			jr 		__CLIPrompt
805D:         	__CLIPromptExit:
805D: 2AC28B  			ld 		hl,(__ARegister) 					; load A/B in
8060: ED5BC48B			ld 		de,(__BRegister) 					; update that part of the display.
8064: CDEA80  			call 	DEBUGShow
              	
8067: 2AB68B  			ld 		hl,(__DIScreenSize)					; bakck to start of 2nd to last row
806A: 11C0FF  			ld		de,-64
806D: 19      			add 	hl,de
806E: DD21DA8B			ld 		ix,__CLIBuffer 						; IX points to buffer
8072:         	__CLILoop:
8072: 117F05  			ld 		de,$057F 							; display prompt
8075: CD1782  			call 	GFXWriteCharacter
8078: CDBC80  			call 	__CLIGetKey 						; get key
807B: FE0D    			cp 		13 									; exec on CR
807D: 281C    			jr 		z,__CLIExecute
807F: FE20    			cp 		' ' 								; exec on space
8081: 2818    			jr 		z,__CLIExecute
8083: DA2180  			jp 		c,WarmStart 						; any other < ' ' warm start e.g. start again
              	
8086: DD7700  			ld 		(ix+0),a 							; save char in buffer
8089: 1606    			ld 		d,6 								; draw it
808B: 5F      			ld 		e,a
808C: CD1782  			call 	GFXWriteCharacter
              	
808F: 7D      			ld 		a,l 								; reached 15 chars, don't add
8090: E60F    			and 	15
8092: FE0F    			cp 		15
8094: 28DC    			jr 		z,__CLILoop
8096: 23      			inc 	hl 									; move forward
8097: DD23    			inc 	ix
8099: 18D7    			jr 		__CLILoop
              	
809B:         	__CLIExecute:
809B: DD360080			ld 		(ix+0),$80 							; mark end
              	
809F: 01D98B  			ld 		bc,__CLIBuffer-1 					; get address of buffer into BC
80A2: 7D      			ld 		a,l 								; get length
80A3: E60F    			and 	$0F 
80A5: F6C0    			or 		$C0 								; 1 10 lllll
80A7: 02      			ld 		(bc),a 								; make that the tag/
              	
80A8: 2AC28B  			ld 		hl,(__ARegister) 					; Execute as a yellow word in context.
80AB: ED5BC48B			ld 		de,(__BRegister)
80AF: CDBB86  			call 	COMXExecuteYellowWord
80B2: ED53C48B			ld 		(__BRegister),de
80B6: 22C28B  			ld 		(__ARegister),hl		
80B9: C32180  			jp 		WarmStart
              	
80BC:         	__CLIGetKey:
80BC: CDC380  			call 	__CLIGetChange
80BF: B7      			or 		a
80C0: 28FA    			jr 		z,__CLIGetKey
80C2: C9      			ret
80C3:         	__CLIGetChange:
80C3: C5      			push 	bc
80C4: 3AD88B  			ld 		a,(__CLICurrentKey)
80C7: 47      			ld 		b,a
80C8:         	__CLIChangeLoop:
80C8: CD8182  			call 	IOScanKeyboard
80CB: B8      			cp 		b
80CC: 28FA    			jr 		z,__CLIChangeLoop
80CE: 32D88B  			ld 		(__CLICurrentKey),a
80D1: C1      			pop 	bc
80D2: C9      			ret
              	
80D3:         	__CLIWelcome:
80D3: 666C6174			db 		"flat.color.forth",$00
80D7: 2E636F6C	
80DB: 6F722E66	
80DF: 6F727468	
80E3: 00      	
80E4:         	__CLIWarmStart:
80E4: 72656164			db 		"ready",$00
80E8: 7900    	
              			include "support/debug.asm"					; display stack on bottom line.		
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		debug.asm
              	;		Purpose:	Show A/B Registers on the screen.
              	;		Date : 		12th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
80EA:         	DEBUGShow:
80EA: C5      			push 	bc
80EB: D5      			push 	de
80EC: E5      			push 	hl 					
              	
80ED: D5      			push 	de 									; save B then A
80EE: E5      			push 	hl
              	
80EF: 2AB68B  			ld 		hl,(__DIScreenSize) 				; clear bottom line.
80F2: 11E0FF  			ld 		de,-32
80F5: 19      			add 	hl,de
80F6: E5      			push 	hl
80F7: 0620    			ld 		b,32
80F9:         	__DEBUGShowClear:
80F9: 112006  			ld 		de,$0620
80FC: CD1782  			call 	GFXWriteCharacter
80FF: 23      			inc 	hl
8100: 10F7    			djnz 	__DEBUGShowClear
              	
8102: E1      			pop 	hl 									; HL now points to start of bottom line
              	
8103: 114105  			ld 		de,$0500+'A'
8106: CD1782  			call 	GFXWriteCharacter
8109: 23      			inc 	hl
810A: 113A05  			ld 		de,$0500+':'
810D: CD1782  			call 	GFXWriteCharacter
8110: 23      			inc 	hl
8111: D1      			pop 	de 									; get pushed A
8112: CD2C81  			call 	__DEBUGPrintDecimalInteger 			; print DE at position HL, C Chars remaining.
8115: 23      			inc 	hl 									; allow a space
              	
8116: 114205  			ld 		de,$0500+'B'
8119: CD1782  			call 	GFXWriteCharacter
811C: 23      			inc 	hl
811D: 113A05  			ld 		de,$0500+':'
8120: CD1782  			call 	GFXWriteCharacter
8123: 23      			inc 	hl
8124: D1      			pop 	de 									; get pushed B
8125: CD2C81  			call 	__DEBUGPrintDecimalInteger 			; print DE at position HL, C Chars remaining.
              	
8128: E1      			pop 	hl 									
8129: D1      			pop 	de 									
812A: C1      			pop 	bc
812B: C9      			ret
              	
812C:         	__DEBUGPrintDecimalInteger:
812C: D5      			push 	de
812D: CB7A    			bit 	7,d 								; is it negative.
812F: 2807    			jr 		z,__DEBUGPrintDecNotNegative
8131: 7A      			ld 		a,d 								; if so, negate the value.
8132: 2F      			cpl
8133: 57      			ld 		d,a
8134: 7B      			ld 		a,e
8135: 2F      			cpl
8136: 5F      			ld 		e,a
8137: 13      			inc 	de
8138:         	__DEBUGPrintDecNotNegative:
8138: CD4781  			call 	__DEBUGPrintDERecursively
              	
813B: D1      			pop 	de
813C: CB7A    			bit 	7,d 								; was it -VE
813E: C8      			ret 	z
813F: 112D06  			ld 		de,$0600+'-'						; print a -ve sign
8142: CD1782  			call 	GFXWriteCharacter
8145: 23      			inc 	hl
8146: C9      			ret
              	
8147:         	__DEBUGPrintDERecursively:
8147: E5      			push 	hl 									; save screen position
8148: 210A00  			ld 		hl,10 								; divide by 10, DE is division, HL is remainder.
814B: CD7A81  			call 	DIVDivideMod16
814E: E3      			ex 		(sp),hl 							; remainder on TOS, HL contains screen position
814F: 7A      			ld 		a,d 								; if DE is non zero call Recursively
8150: B3      			or 		e
8151: C44781  			call 	nz,__DEBUGPrintDERecursively
8154: D1      			pop 	de 									; DE = remainder
8155: 7B      			ld 		a,e 								; convert E to a character
8156: F630    			or 		'0'
8158: 5F      			ld 		e,a
8159: 1606    			ld 		d,6 								; yellow
815B: CD1782  			call 	GFXWriteCharacter 					; write digit.
815E: 23      			inc 	hl 	
815F: C9      			ret
              			include "support/multiply.asm" 				; 16 bit multiply (not used in kernel)
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		12th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
8160:         	MULTMultiply16:
8160: C5      			push 	bc
8161: D5      			push 	de
8162: 44      			ld 		b,h 							; get multipliers in DE/BC
8163: 4D      			ld 		c,l
8164: 210000  			ld 		hl,0 							; zero total
8167:         	__Core__Mult_Loop:
8167: CB41    			bit 	0,c 							; lsb of shifter is non-zero
8169: 2801    			jr 		z,__Core__Mult_Shift
816B: 19      			add 	hl,de 							; add adder to total
816C:         	__Core__Mult_Shift:
816C: CB38    			srl 	b 								; shift BC right.
816E: CB19    			rr 		c
8170: EB      			ex 		de,hl 							; shift DE left
8171: 29      			add 	hl,hl
8172: EB      			ex 		de,hl
8173: 78      			ld 		a,b 							; loop back if BC is nonzero
8174: B1      			or 		c
8175: 20F0    			jr 		nz,__Core__Mult_Loop
8177: D1      			pop 	de
8178: C1      			pop 	bc
8179: C9      			ret
              	
              			include "support/divide.asm" 				; 16 bit divide (not used in kernel)
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		12th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
817A:         	DIVDivideMod16:
              	
817A: C5      		push 	bc
817B: 42      		ld 		b,d 				; DE 
817C: 4B      		ld 		c,e
817D: EB      		ex 		de,hl
817E: 210000  		ld 		hl,0
8181: 78      		ld 		a,b
8182: 0608    		ld 		b,8
8184:         	Div16_Loop1:
8184: 17      		rla
8185: ED6A    		adc 	hl,hl
8187: ED52    		sbc 	hl,de
8189: 3001    		jr 		nc,Div16_NoAdd1
818B: 19      		add 	hl,de
818C:         	Div16_NoAdd1:
818C: 10F6    		djnz 	Div16_Loop1
818E: 17      		rla
818F: 2F      		cpl
8190: 47      		ld 		b,a
8191: 79      		ld 		a,c
8192: 48      		ld 		c,b
8193: 0608    		ld 		b,8
8195:         	Div16_Loop2:
8195: 17      		rla
8196: ED6A    		adc 	hl,hl
8198: ED52    		sbc 	hl,de
819A: 3001    		jr 		nc,Div16_NoAdd2
819C: 19      		add 	hl,de
819D:         	Div16_NoAdd2:
819D: 10F6    		djnz 	Div16_Loop2
819F: 17      		rla
81A0: 2F      		cpl
81A1: 51      		ld 		d,c
81A2: 5F      		ld 		e,a
81A3: C1      		pop 	bc
81A4: C9      		ret
              			
              			
              			include "support/farmemory.asm" 			; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		12th December 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              		
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A/L
              	;
              	; ***********************************************************************************************
              	
81A5:         	FARCompileByte:
81A5: F5      			push 	af 									; save byte and HL
81A6: E5      			push 	hl
81A7: F5      			push 	af 									; save byte
81A8: 3AA08B  			ld		a,(HerePage) 						; switch to page
81AB: CD6083  			call 	PAGESwitch
81AE: 2A9E8B  			ld 		hl,(Here) 							; write to memory location
81B1: F1      			pop 	af
81B2: 77      			ld 		(hl),a
81B3: 23      			inc 	hl 									; bump memory location
81B4: 229E8B  			ld 		(Here),hl 							; write back
81B7: CD7983  			call 	PAGERestore
81BA: E1      			pop 	hl 									; restore and exit
81BB: F1      			pop 	af
81BC: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory A/HL
              	;
              	; ***********************************************************************************************
              	
81BD:         	FARCompileWord:
81BD: F5      			push 	af 									; save byte and HL
81BE: D5      			push 	de
81BF: E5      			push 	hl
81C0: EB      			ex 		de,hl 								; word into DE
81C1: 3AA08B  			ld		a,(HerePage) 						; switch to page
81C4: CD6083  			call 	PAGESwitch
81C7: 2A9E8B  			ld 		hl,(Here) 							; write to memory location
81CA: 73      			ld 		(hl),e
81CB: 23      			inc 	hl 	
81CC: 72      			ld 		(hl),d
81CD: 23      			inc 	hl
81CE: 229E8B  			ld 		(Here),hl 							; write back
81D1: CD7983  			call 	PAGERestore
81D4: E1      			pop 	hl
81D5: D1      			pop 	de 									; restore and exit
81D6: F1      			pop 	af
81D7: C9      			ret
              			include "support/graphics.asm" 				; common graphics
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		12th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;									Clear screen
              	;
              	; *********************************************************************************
              	
81D8:         	GFXClearScreen:
81D8: E5      			push 	hl 									; clear screen by reinitialising
81D9: 3ABA8B  			ld 		a,(__DIScreenMode)
81DC: CDE281  			call 	GFXMode
81DF: E1      			pop 	hl
81E0: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to A
              	;
              	; *********************************************************************************
              	
81E1:         	GFXModeE:
81E1: 7B      			ld 		a,e
81E2:         	GFXMode:
81E2: C5      			push 	bc
81E3: D5      			push 	de
81E4: E5      			push 	hl
81E5: 6F      			ld 		l,a 								; save current mode
81E6: 32BA8B  			ld 		(__DIScreenMode),a
81E9: 2D      			dec 	l 									; L = 1 mode layer2
81EA: 2808    			jr 		z,__GFXLayer2
81EC: 2D      			dec 	l
81ED: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
81EF: CD8F83  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
81F2: 1808    			jr 		__GFXConfigure
              	
81F4:         	__GFXLayer2:
81F4: CDF283  			call 	GFXInitialiseLayer2
81F7: 1803    			jr 		__GFXConfigure
              	
81F9:         	__GFXLowRes:
81F9: CD9E84  			call 	GFXInitialiseLowRes
              	
81FC:         	__GFXConfigure:
81FC: 7D      			ld 		a,l 								; save screen extent
81FD: 32AE8B  			ld 		(__DIScreenWidth),a
8200: 7C      			ld 		a,h
8201: 32B28B  			ld 		(__DIScreenHeight),a
8204: EB      			ex 		de,hl 								; save driver
8205: 22C08B  			ld 		(__DIScreenDriver),hl
8208: 6A      			ld 		l,d 								; make sizes 16 bit in HL/DE
8209: 2600    			ld 		h,0
820B: 1600    			ld 		d,0
820D: CD6081  			call 	MULTMultiply16
8210: 22B68B  			ld 		(__DIScreenSize),hl
8213: E1      			pop 	hl
8214: D1      			pop 	de
8215: C1      			pop 	bc
8216: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
8217:         	GFXWriteCharacter:
8217: F5      			push 	af
8218: C5      			push 	bc
8219: D5      			push 	de
821A: E5      			push 	hl
821B: 012582  			ld 		bc,__GFXWCExit
821E: C5      			push 	bc
821F: ED4BC08B			ld 		bc,(__DIScreenDriver)
8223: C5      			push 	bc
8224: C9      			ret
8225:         	__GFXWCExit:
8225: E1      			pop 	hl
8226: D1      			pop 	de
8227: C1      			pop 	bc
8228: F1      			pop 	af
8229: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
822A:         	GFXWriteHexWord:
822A: 3E06    			ld 		a,6 
822C:         	GFXWriteHexWordA:
822C: C5      			push 	bc
822D: D5      			push 	de
822E: E5      			push 	hl
822F: 4F      			ld 		c,a
8230: 7A      			ld 		a,d
8231: D5      			push 	de
8232: CD3E82  			call 	__GFXWHByte
8235: D1      			pop 	de
8236: 7B      			ld 		a,e
8237: CD3E82  			call	__GFXWHByte
823A: E1      			pop 	hl
823B: D1      			pop 	de
823C: C1      			pop 	bc
823D: C9      			ret
              	
823E:         	__GFXWHByte:
823E: F5      			push 	af
823F: CB0F    			rrc 	a
8241: CB0F    			rrc		a
8243: CB0F    			rrc 	a
8245: CB0F    			rrc 	a
8247: CD4B82  			call 	__GFXWHNibble
824A: F1      			pop 	af
824B:         	__GFXWHNibble:
824B: 51      			ld 		d,c
824C: E60F    			and 	15
824E: FE0A    			cp 		10
8250: 3802    			jr 		c,__GFXWHDigit
8252: C607    			add		a,7
8254:         	__GFXWHDigit:
8254: C630    			add 	a,48
8256: 5F      			ld 		e,a
8257: CD1782  			call 	GFXWriteCharacter
825A: 23      			inc 	hl
825B: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				For character A, put address of character in DE
              	;
              	; *********************************************************************************
              	
825C:         	GFXGetFontGraphicDE:
825C: F5      			push 	af
825D: C5      			push 	bc
825E: E5      			push 	hl
825F: E67F    			and 	$7F 								; bits 0-6 only.
8261: D620    			sub 	32
8263: 6F      			ld 		l,a 								; put in HL
8264: 2600    			ld 		h,0
8266: 29      			add 	hl,hl 								; x 8
8267: 29      			add 	hl,hl
8268: 29      			add 	hl,hl
8269: ED5BBE8B			ld 		de,(__DIFontBase) 					; add the font base.
826D: 19      			add 	hl,de
826E: EB      			ex 		de,hl 								; put in DE (font address)
826F: E1      			pop 	hl
8270: C1      			pop 	bc
8271: F1      			pop 	af
8272: FE7F    			cp 		$7F
8274: C0      			ret 	nz
8275: 117982  			ld 		de,__GFXPromptCharacter
8278: C9      			ret
              	
8279:         	__GFXPromptCharacter:
8279: FC7E3F1F			db 		$FC,$7E,$3F,$1F
827D: 1F3F7EFC			db 		$1F,$3F,$7E,$FC
              	
              	
              			include "support/keyboard.asm"				; keyboard handler
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		12th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              		
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8281:         	IOScanKeyboard:
8281: C5      			push 	bc
8282: D5      			push 	de
8283: E5      			push 	hl
              	
8284: 21D682  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8287: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
8289: 06FE    			ld 		b,$FE
828B: ED78    			in 		a,(c)
828D: CB47    			bit 	0,a
828F: 2005    			jr 		nz,__kr1
8291: 21FE82  			ld 		hl,__kr_shift_table
8294: 180B    			jr 		__kr2
8296:         	__kr1:
8296: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
8298: ED78    			in 		a,(c)
829A: CB4F    			bit 	1,a
829C: 2003    			jr 		nz,__kr2
829E: 21FE82  			ld 		hl,__kr_symbol_shift_table
82A1:         	__kr2:
              	
82A1: 1EFE    			ld 		e,$FE 								; scan pattern.
82A3: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
82A4: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
82A6: FEFE    			cp 		$FE
82A8: 2808    			jr 		z,___kr4
82AA: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
82AC: FE7F    			cp 		$7F
82AE: 2802    			jr 		z,___kr4
82B0: 161F    			ld 		d,$01F 								; check all bits.
82B2:         	___kr4:
82B2: 43      			ld 		b,e 								; scan the keyboard
82B3: 0EFE    			ld 		c,$FE
82B5: ED78    			in 		a,(c)
82B7: 2F      			cpl 										; make that active high.
82B8: A2      			and 	d  									; and with check value.
82B9: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
82BB: 23      			inc 	hl 									; next set of keyboard characters
82BC: 23      			inc 	hl
82BD: 23      			inc 	hl
82BE: 23      			inc 	hl
82BF: 23      			inc 	hl
              	
82C0: 7B      			ld 		a,e 								; get pattern
82C1: 87      			add 	a,a 								; shift left
82C2: F601    			or 		1 									; set bit 1.
82C4: 5F      			ld 		e,a
              	
82C5: FEFF    			cp 		$FF 								; finished when all 1's.
82C7: 20DA    			jr 		nz,__kr3 
82C9: AF      			xor 	a
82CA: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
82CC:         	__kr_keypressed:
82CC: 23      			inc 	hl  								; shift right until carry set
82CD: 1F      			rra
82CE: 30FC    			jr 		nc,__kr_keypressed
82D0: 2B      			dec 	hl 									; undo the last inc hl
82D1: 7E      			ld 		a,(hl) 								; get the character number.
82D2:         	__kr_exit:
82D2: E1      			pop 	hl
82D3: D1      			pop 	de
82D4: C1      			pop 	bc
82D5: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	3:Abort (Shift+Q) 8:Backspace 13:Return 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
82D6:         	__kr_no_shift_table:
82D6: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
82DA: 76617364	
82DE: 6667    	
82E0: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
82E4: 74313233	
82E8: 3435    	
82EA: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
82EE: 36706F69	
82F2: 7579    	
82F4: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
82F8: 6820006D	
82FC: 6E62    	
              	
82FE:         	__kr_shift_table:
82FE:         	__kr_symbol_shift_table:
82FE: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8302: 2F7E7C5C	
8306: 7B7D    	
8308: 0300003C			db 		 3,  0,  0  ,'<','>',			'!','@','#','$','%'
830C: 3E214023	
8310: 2425    	
8312: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
8316: 26223B00	
831A: 5D5B    	
831C: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8320: 5E20002E	
8324: 2C2A    	
              	
8326: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
832A: 2F7E7C5C	
832E: 7B7D    	
8330: 0300003C			db 		3,  0,  0  ,'<','>',			16,17,18,19,20
8334: 3E101112	
8338: 1314    	
833A: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
833E: 15223B00	
8342: 5D5B    	
8344: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8348: 5E20002E	
834C: 2C2A    	
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		12th December 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
834E:         	PAGEInitialise:
834E: E5      			push 	hl
834F: ED9256  			db 		$ED,$92,$56							; switch to page A
8352: 3C      			inc 	a
8353: ED9257  			db 		$ED,$92,$57
8356: 3D      			dec 	a
8357: 08      			ex 		af,af' 								; put page in A'
8358: 21C88B  			ld 		hl,__PAGEStackBase 					; reset the page stack
835B: 22C68B  			ld 		(__PAGEStackPointer),hl
835E: E1      			pop 	hl
835F: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
8360:         	PAGESwitch:
8360: F5      			push 	af
8361: E5      			push 	hl
              	
8362: F5      			push 	af 									; save A on stack
8363: 2AC68B  			ld 		hl,(__PAGEStackPointer) 			; put A' on the stack, the current page
8366: 08      			ex 		af,af'
8367: 77      			ld 		(hl),a
8368: 23      			inc 	hl
8369: 22C68B  			ld 		(__PAGEStackPointer),hl
              	
836C: F1      			pop 	af 									; restore new A
836D: ED9256  			db 		$ED,$92,$56							; switch to page A
8370: 3C      			inc 	a
8371: ED9257  			db 		$ED,$92,$57
8374: 3D      			dec 	a
8375: 08      			ex 		af,af' 								; put page in A'
              	
8376: E1      			pop 	hl
8377: F1      			pop 	af
8378: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
8379:         	PAGERestore:
8379: F5      			push 	af
837A: E5      			push 	hl
837B: 2AC68B  			ld 		hl,(__PAGEStackPointer) 			; pop the old page off
837E: 2B      			dec 	hl
837F: 7E      			ld 		a,(hl)
8380: 22C68B  			ld 		(__PAGEStackPointer),hl
8383: ED9256  			db 		$ED,$92,$56							; switch to page A
8386: 3C      			inc 	a
8387: ED9257  			db 		$ED,$92,$57
838A: 3D      			dec 	a
838B: 08      			ex 		af,af' 								; update A'
838C: E1      			pop 	hl
838D: F1      			pop 	af
838E: C9      			ret
              					
              			include "support/screen48k.asm"				; screen "drivers"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		12th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
838F:         	GFXInitialise48k:
838F: F5      			push 	af 									; save registers
8390: C5      			push 	bc
              	
8391: 013B12  			ld 		bc,$123B 							; Layer 2 access port
8394: 3E00    			ld 		a,0 								; disable Layer 2
8396: ED79    			out 	(c),a
8398: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
839C: 210040  			ld 		hl,$4000 							; clear pixel memory
839F: 3600    	__cs1:	ld 		(hl),0
83A1: 23      			inc 	hl
83A2: 7C      			ld 		a,h
83A3: FE58    			cp 		$58
83A5: 20F8    			jr 		nz,__cs1
83A7: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
83A9: 23      			inc 	hl
83AA: 7C      			ld 		a,h
83AB: FE5B    			cp 		$5B
83AD: 20F8    			jr 		nz,__cs2	
83AF: AF      			xor 	a 									; border off
83B0: D3FE    			out 	($FE),a
83B2: C1      			pop 	bc
83B3: F1      			pop 	af
83B4: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
83B7: 11BB83  			ld 		de,GFXPrintCharacter48k
83BA: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
83BB:         	GFXPrintCharacter48k:
83BB: F5      			push 	af 									; save registers
83BC: C5      			push 	bc
83BD: D5      			push 	de
83BE: E5      			push 	hl
              	
83BF: 43      			ld 		b,e 								; character in B
83C0: 7C      			ld 		a,h 								; check range.
83C1: FE03    			cp 		3
83C3: 3028    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
83C5: E5      			push 	hl 									; save position.
83C6: 7C      			ld 		a,h
83C7: C658    			add 	$58
83C9: 67      			ld 		h,a
              	
83CA: 7A      			ld 		a,d 								; get current colour
83CB: E607    			and 	7  									; mask 0..2
83CD: F640    			or 		$40  								; make bright
83CF: 77      			ld 		(hl),a 								; store it.	
83D0: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
83D1: D5      			push 	de
83D2: EB      			ex 		de,hl
83D3: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
83D4: 7A      			ld 		a,d
83D5: E603    			and 	3
83D7: 87      			add 	a,a
83D8: 87      			add 	a,a
83D9: 87      			add 	a,a
83DA: F640    			or 		$40
83DC: 67      			ld 		h,a
83DD: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
83DE: 78      			ld 		a,b 								; get character
83DF: CD5C82  			call 	GFXGetFontGraphicDE
              	;
              	;		copy font data to screen position.
              	;
83E2: 78      			ld 		a,b
83E3: 0608    			ld 		b,8 								; copy 8 characters
83E5: 0E00    			ld 		c,0 								; XOR value 0
83E7:         	__ZXWCCopy:
83E7: 1A      			ld 		a,(de)								; get font data
83E8: 77      			ld 		(hl),a 								; write back
83E9: 24      			inc 	h 									; bump pointers
83EA: 13      			inc 	de
83EB: 10FA    			djnz 	__ZXWCCopy 							; do B times.
83ED:         	__ZXWCExit:
83ED: E1      			pop 	hl 									; restore and exit
83EE: D1      			pop 	de
83EF: C1      			pop 	bc
83F0: F1      			pop 	af
83F1: C9      			ret
              	
              			include "support/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		12th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
83F2:         	GFXInitialiseLayer2:
83F2: F5      			push 	af
83F3: C5      			push 	bc
83F4: D5      			push 	de
83F5: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
83F9: 1E02    			ld 		e,2 								; 3 banks to erase
83FB:         	L2PClear:
83FB: 7B      			ld 		a,e 								; put bank number in bits 6/7
83FC: CB0F    			rrc 	a
83FE: CB0F    			rrc 	a
8400: F603    			or 		2+1 								; shadow on, visible, enable write paging
8402: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8405: ED79    			out 	(c),a
8407: 210040  			ld 		hl,$4000 							; erase the bank to $00 
840A: 55      			ld 		d,l 								; D = 0, slightly quicker.
840B:         	L2PClearBank: 										; assume default palette :)
840B: 2B      			dec 	hl
840C: 72      			ld 		(hl),d
840D: 7C      			ld 		a,h
840E: B5      			or 		l
840F: 20FA    			jr		nz,L2PClearBank
8411: 1D      			dec 	e
8412: F2FB83  			jp 		p,L2PClear
              	
8415: AF      			xor 	a
8416: D3FE    			out 	($FE),a
              	
8418: D1      			pop 	de
8419: C1      			pop 	bc
841A: F1      			pop 	af
841B: 212018  			ld 		hl,$1820 							; still 32 x 24 	
841E: 112284  			ld 		de,GFXPrintCharacterLayer2
8421: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
8422:         	GFXPrintCharacterLayer2:
8422: F5      			push 	af
8423: C5      			push 	bc
8424: D5      			push 	de
8425: E5      			push 	hl
8426: DDE5    			push 	ix
              	
8428: 43      			ld 		b,e 								; save A temporarily
8429: 78      			ld 		a,b
              	
842A: 7C      			ld 		a,h
842B: FE03    			cp 		3
842D: 3068    			jr 		nc,__L2Exit 						; check position in range
842F: 78      			ld 		a,b
              	
8430: F5      			push 	af 	
8431: AF      			xor 	a 									; convert colour in C to palette index
8432: CB42    			bit 	0,d 								; (assumes standard palette)
8434: 2802    			jr 		z,__L2Not1
8436: F603    			or 		$03
8438:         	__L2Not1:
8438: CB52    			bit 	2,d
843A: 2802    			jr 		z,__L2Not2
843C: F61C    			or 		$1C
843E:         	__L2Not2:
843E: CB4A    			bit 	1,d
8440: 2802    			jr 		z,__L2Not3
8442: F6C0    			or 		$C0
8444:         	__L2Not3:
8444: 4F      			ld 		c,a 								; C is foreground
8445: F1      			pop 	af 									; restore char
              	
8446: CD5C82  			call 	GFXGetFontGraphicDE 				; font offset in DE
8449: D5      			push 	de 									; transfer to IX
844A: DDE1    			pop 	ix
              	
              			;
              			;		figure out the correct bank.
              			;
844C: C5      			push 	bc
844D: 7C      			ld  	a,h 								; this is the page number.
844E: CB0F    			rrc 	a
8450: CB0F    			rrc 	a
8452: E6C0    			and 	$C0 								; in bits 6 & 7
8454: F603    			or 		$03 								; shadow on, visible, enable write pagin.
8456: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8459: ED79    			out 	(c),a
845B: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
845C: EB      			ex 		de,hl
845D: 6B      			ld 		l,e
845E: 2600    			ld 		h,0
8460: 29      			add 	hl,hl 								
8461: 29      			add 	hl,hl
8462: 29      			add 	hl,hl
8463: CB24    			sla 	h
8465: CB24    			sla 	h
8467: CB24    			sla 	h
              	
8469: 1E08    			ld 		e,8 								; do 8 rows
846B:         	__L2Outer:
846B: E5      			push 	hl 									; save start
846C: 1608    			ld 		d,8 								; do 8 columns
846E: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8471: DD23    			inc 	ix
8473: B7      			or 		a
8474: 280C    			jr 		z,__L2Blank
8476:         	__L2Loop:
8476: 3600    			ld 		(hl),0 								; background
8478: 87      			add 	a,a 								; shift pattern left
8479: 3001    			jr 		nc,__L2NotSet
847B: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
847C:         	__L2NotSet:
847C: 23      			inc 	hl
847D: 15      			dec 	d 									; do a row
847E: 20F6    			jr 		nz,	__L2Loop
8480: 1810    			jr 		__L2Exit1
8482:         	__L2Blank:
8482: AF      			xor 	a
8483: 77      			ld 		(hl),a
8484: 23      			inc 	hl
8485: 77      			ld 		(hl),a
8486: 23      			inc 	hl
8487: 77      			ld 		(hl),a
8488: 23      			inc 	hl
8489: 77      			ld 		(hl),a
848A: 23      			inc 	hl
848B: 77      			ld 		(hl),a
848C: 23      			inc 	hl
848D: 77      			ld 		(hl),a
848E: 23      			inc 	hl
848F: 77      			ld 		(hl),a
8490: 23      			inc 	hl
8491: 77      			ld 		(hl),a
8492:         	__L2Exit1:
8492: E1      			pop 	hl 									; restore, go 256 bytes down.
8493: 24      			inc 	h
8494: 1D      			dec 	e 									; do 8 rows
8495: 20D4    			jr 		nz,__L2Outer	
8497:         	__L2Exit:
8497: DDE1    			pop 	ix
8499: E1      			pop 	hl
849A: D1      			pop 	de
849B: C1      			pop 	bc
849C: F1      			pop 	af
849D: C9      			ret
              			include "support/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		12th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
849E:         	GFXInitialiseLowRes:
849E: F5      			push 	af
849F: C5      			push 	bc
84A0: D5      			push 	de
              	
84A1: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
84A5: AF      			xor 	a 									; layer 2 off.
84A6: 013B12  			ld 		bc,$123B 							; out to layer 2 port
84A9: ED79    			out 	(c),a
              	
84AB: 210040  			ld 		hl,$4000 							; erase the bank to $00 
84AE: 110060  			ld 		de,$6000
84B1:         	LowClearScreen: 									; assume default palette :)
84B1: AF      			xor 	a
84B2: 77      			ld 		(hl),a
84B3: 12      			ld 		(de),a
84B4: 23      			inc 	hl
84B5: 13      			inc 	de
84B6: 7C      			ld 		a,h
84B7: FE58    			cp 		$58
84B9: 20F6    			jr		nz,LowClearScreen
84BB: AF      			xor 	a
84BC: D3FE    			out 	($FE),a
84BE: D1      			pop 	de
84BF: C1      			pop 	bc
84C0: F1      			pop 	af
84C1: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
84C4: 11C884  			ld 		de,GFXPrintCharacterLowRes
84C7: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
84C8:         	GFXPrintCharacterLowRes:
84C8: F5      			push 	af
84C9: C5      			push 	bc
84CA: D5      			push 	de
84CB: E5      			push 	hl
84CC: DDE5    			push 	ix
              	
84CE: 43      			ld 		b,e 								; save character in B
              	
84CF: 29      			add 	hl,hl
84D0: 29      			add 	hl,hl
84D1: 7C      			ld	 	a,h 								; check in range 192*4 = 768
84D2: FE03    			cp 		3
84D4: 3046    			jr 		nc,__LPExit
              	
84D6: 7A      			ld 		a,d 								; only lower 3 bits of colour
84D7: E607    			and 	7
84D9: 4F      			ld 		c,a 								; C is foreground
              	
84DA: 78      			ld 		a,b 								; get char back
84DB: CD5C82  			call 	GFXGetFontGraphicDE
84DE: D5      			push 	de
84DF: DDE1    			pop 	ix
              	
84E1: EB      			ex 		de,hl
84E2: 7B      			ld 		a,e 								; put DE => HL
84E3: E6C0    			and 	192 								; these are part of Y
84E5: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
84E6: 62      			ld 		h,d		
84E7: 29      			add 	hl,hl
84E8: 29      			add 	hl,hl
84E9: 29      			add 	hl,hl
84EA: 29      			add 	hl,hl
84EB: CBF4    			set 	6,h 								; put into $4000 range
              	
84ED: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
84EF: A3      			and 	e 									; and with E, gives X position
84F0: 87      			add 	a,a 								; now multiplied by 8.
84F1: 5F      			ld 		e,a 								; DE is x offset.
84F2: 1600    			ld 		d,0  
              	
84F4: 19      			add 	hl,de
84F5: 7C      			ld 		a,h
84F6: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
84F8: 3804    			jr 		c,__LowNotLower2
84FA: 110008  			ld 		de,$0800
84FD: 19      			add 	hl,de
84FE:         	__LowNotLower2:
84FE: 1E08    			ld 		e,8 								; do 8 rows
8500:         	__LowOuter:
8500: E5      			push 	hl 									; save start
8501: 1608    			ld 		d,8 								; do 8 columns
8503: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8506: DD23    			inc 	ix
8508:         	__LowLoop:
8508: 3600    			ld 		(hl),0 								; background
850A: 87      			add 	a,a 								; shift pattern left
850B: 3001    			jr 		nc,__LowNotSet
850D: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
850E:         	__LowNotSet:
850E: 2C      			inc 	l
850F: 15      			dec 	d 									; do a row
8510: 20F6    			jr 		nz,	__LowLoop
8512: E1      			pop 	hl 									; restore, go 256 bytes down.
8513: D5      			push 	de
8514: 118000  			ld 		de,128
8517: 19      			add 	hl,de
8518: D1      			pop 	de
8519: 1D      			dec 	e 									; do 8 rows
851A: 20E4    			jr 		nz,__LowOuter	
851C:         	__LPExit:
851C: DDE1    			pop 	ix
851E: E1      			pop 	hl
851F: D1      			pop 	de
8520: C1      			pop 	bc
8521: F1      			pop 	af
8522: C9      			ret
              	
              	
              			include "compiler/buffer.asm" 				; buffer code.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		buffer.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th December 2018
              	;		Purpose :	Scan pages for buffers.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;						Scan and compile all pages with buffers
              	;
              	; ***************************************************************************************
              	
8523:         	BUFFScan:
8523: 2101AA  			ld 		hl,$AA01	 						; setup A and B
8526: 1102BB  			ld 		de,$BB02
8529: 210000  			ld 		hl,$0000
852C: 110000  			ld 		de,$0000
852F: 22C28B  			ld 		(__ARegister),hl
8532: ED53C48B			ld 		(__BRegister),de
8536: 1E22    			ld 		e,FirstSourcePage 					; set the first source page.
              	;
              	;		Loop here to scan the next source page.
              	;
8538:         	__BUFFScanSourcePage:
8538: 7B      			ld 		a,e 								; switch to the source page.
8539: CD6083  			call 	PAGESwitch
853C: DD2100C0			ld 		ix,$C000 							; next page to scan.
              	;
              	;		Come here to scan the buffer at E:HL
              	;
8540:         	__BUFFScanNextPageInBuffer:
8540: DD7E00  			ld 		a,(ix+0) 							; is the buffer empty ?
8543: FE80    			cp 		$80
8545: 2821    			jr 		z,__BUFFNextPage 					; don't bother with this whole page.
              	
8547: D5      			push 	de 									; save E
              	
8548: DDE5    			push 	ix									; copy into edit buffer.
854A: E1      			pop 	hl
854B: 11087B  			ld 		de,EditBuffer
854E: 010002  			ld 		bc,EditPageSize
8551: EDB0    			ldir 
              	
8553: 01087B  			ld 		bc,EditBuffer 						; BC is the code to compile.
8556: 2AC28B  			ld 		hl,(__ARegister)					; load registers
8559: ED5BC48B			ld 		de,(__BRegister)
855D: CD8986  			call 	COMCompileWordList 					; compile that word list.
8560: ED53C48B			ld 		(__BRegister),de
8564: 22C28B  			ld 		(__ARegister),hl
8567: D1      			pop 	de 									; restore E
              			
8568:         	__BUFFNextPage:		
8568: 010002  			ld 		bc,EditPageSize 					; go to next buffer
856B: DD09    			add 	ix,bc
856D: 30D1    			jr 		nc,__BUFFScanNextPageInBuffer
              	
856F: CD7983  			call 	PAGERestore 						; back to original page
              	
8572: 1C      			inc 	e 									; go forward 2 (using 16k pages)
8573: 1C      			inc 	e
8574: 7B      			ld 		a,e  								; check scanned all buffers.
8575: FE26    			cp 		FirstSourcePage+SourcePageCount 
8577: 20BF    			jr 		nz,__BUFFScanSourcePage
              	
8579: C31A80  			jp 		CommandLineStart
              	
              	
              			include "compiler/utility.asm"				; utility functions.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		utility.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th December 2018
              	;		Purpose :	Compile Utilities
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;						 Compile call to code following this call
              	;
              	; ***************************************************************************************
              	
857C:         	COMUCompileCallToSelf:
857C: DD01    			db 		$DD,$01
857E: C9      			ret
              	
              	; ***************************************************************************************
              	;
              	;							Compile code to load constant
              	;
              	; ***************************************************************************************
              	
857F:         	COMUCompileConstant:
857F: 3EEB    			ld 		a,$EB 								; EX DE,HL
8581: CDA581  			call 	FARCompileByte
8584: 3E21    			ld 		a,$21								; LD HL,xxxx
8586: CDA581  			call 	FARCompileByte
8589: CDBD81  			call 	FARCompileWord						; compile constant
858C: C9      			ret
              	
              	; ***************************************************************************************
              	;
              	;			Compile code to copy A bytes from code following caller (for MACRO)
              	;
              	; ***************************************************************************************
              	
858D:         	COMUCopyCode:
858D: E3      			ex 		(sp),hl 							; old HL on stack, new HL is return address
858E: C5      			push 	bc 									; preserve BC
858F: 46      			ld 		b,(hl) 								; count to copy
8590:         	__COMUCopyLoop:
8590: 23      			inc 	hl
8591: 7E      			ld 		a,(hl) 								; read a byte
8592: CDA581  			call 	FARCompileByte 						; compile it
8595: 10F9    			djnz	__COMUCopyLoop
8597: C1      			pop 	bc 									; restore BC
8598: E1      			pop 	hl 									; restore old HL.
8599: C9      			ret
              	
              	
              	
              			include "compiler/constant.asm"				; ASCII -> Integer conversion
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		constant.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th December 2018
              	;		Purpose :	ASCII -> Integer conversion.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;		Convert Tagged ASCII string at BC to constant in HL. Carry Clear if successful.
              	;								Uses Colorforth's backend - format.
              	;
              	; ***********************************************************************************************
              	
859A:         	CONSTConvert:
859A: C5      		push 	bc
              	
859B: 50      		ld 		d,b 									; string in DE.
859C: 59      		ld 		e,c
859D: 13      		inc 	de 										; skip over the tag byte.
              	
859E: 210000  		ld 		hl,$0000								; result in HL.
85A1:         	__CONConvLoop:
85A1: 1A      		ld 		a,(de)									; get next character
85A2: 13      		inc 	de
              	
85A3: FE30    		cp 		'0'										; must be 0-9 otherwise
85A5: 382D    		jr 		c,__CONConFail
85A7: FE3A    		cp 		'9'+1
85A9: 3029    		jr 		nc,__CONConFail
              	
85AB: C5      		push 	bc
85AC: E5      		push 	hl 										; HL -> BC
85AD: C1      		pop 	bc
85AE: 29      		add 	hl,hl 									; HL := HL * 4 + BC 
85AF: 29      		add 	hl,hl
85B0: 09      		add 	hl,bc 						
85B1: 29      		add 	hl,hl 									; HL := HL * 10
85B2: 0600    		ld 		b,0 									; add the digit into HL
85B4: E60F    		and 	15
85B6: 4F      		ld 		c,a
85B7: 09      		add 	hl,bc
85B8: C1      		pop 	bc
              	
85B9: 1A      		ld 		a,(de) 									; check ends in -
85BA: FE2D    		cp 		'-'									
85BC: 2806    		jr 		z,__CONMinusExit 						
85BE: CB7F    		bit 	7,a										; keep going till reached the next tag.
85C0: 28DF    		jr 		z,__CONConvLoop
85C2: 180D    		jr 		__CONNotNegative
              	
85C4:         	__CONMinusExit:
85C4: 13      		inc 	de 										; if not the last, it's an error.
85C5: 1A      		ld 		a,(de)
85C6: CB7F    		bit 	7,a
85C8: 280A    		jr		z,__CONConFail
              	
85CA: 7C      		ld 		a,h 									; negate HL
85CB: 2F      		cpl 	
85CC: 67      		ld 		h,a
85CD: 7D      		ld 		a,l
85CE: 2F      		cpl
85CF: 6F      		ld 		l,a
85D0: 23      		inc 	hl
              	
85D1:         	__CONNotNegative:
85D1: AF      		xor 	a 										; clear carry
85D2: C1      		pop 	bc
85D3: C9      		ret
              	
85D4:         	__CONConFail: 										; didn't convert
85D4: 37      		scf
85D5: C1      		pop 	bc
85D6: C9      		ret
              		
              			include "compiler/dictionary.asm" 			; Dictionary workers
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		dictionary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th December 2018
              	;		Purpose :	Dictionary handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;		Add Dictionary Word. Name is a tagged string at BC ends in $80-$FF, uses the current 
              	;		page/pointer values. 
              	;
              	; ***********************************************************************************************
              	
85D7:         	DICTAddWord:
85D7: F5      			push 	af 									; registers to stack.
85D8: C5      			push 	bc
85D9: D5      			push 	de
85DA: E5      			push	hl
85DB: DDE5    			push 	ix
              	
85DD: C5      			push 	bc 									; put word address in HL
85DE: E1      			pop 	hl 
              	
85DF: 7E      			ld 		a,(hl) 								; get length from tag into B
85E0: E61F    			and 	$1F
85E2: 47      			ld 		b,a
85E3: 23      			inc 	hl 									; HL = first character
              	
85E4: 3E20    			ld 		a,DictionaryPage					; switch to dictionary page
85E6: CD6083  			call 	PAGESwitch
              	
85E9: DD2100C0			ld 		ix,$C000							; IX = Start of dictionary
              	
85ED:         	__DICTFindEndDictionary:
85ED: DD7E00  			ld 		a,(ix+0) 							; follow down chain to the end
85F0: B7      			or 		a
85F1: 2807    			jr 		z,__DICTCreateEntry
85F3: 5F      			ld 		e,a
85F4: 1600    			ld 		d,0
85F6: DD19    			add 	ix,de
85F8: 18F3    			jr 		__DICTFindEndDictionary
              	
85FA:         	__DICTCreateEntry:
85FA: 78      			ld 		a,b
85FB: C605    			add 	a,5
85FD: DD7700  			ld 		(ix+0),a 							; offset is length + 5
              	
8600: 3AA08B  			ld 		a,(HerePage)						; code page
8603: DD7701  			ld 		(ix+1),a
              	
8606: ED5B9E8B			ld 		de,(Here) 							; code address
860A: DD7302  			ld 		(ix+2),e
860D: DD7203  			ld 		(ix+3),d 
              	
8610: DD7004  			ld 		(ix+4),b 							; put length in.
              	
8613: EB      			ex 		de,hl 								; put name in DE
8614:         	__DICTAddCopy:
8614: 1A      			ld 		a,(de) 								; copy byte over as 7 bit ASCII.
8615: DD7705  			ld 		(ix+5),a
8618: DD23    			inc 	ix 									
861A: 13      			inc 	de
861B: 10F7    			djnz	__DICTAddCopy 						; until string is copied over.
              	
861D: DD360500			ld 		(ix+5),0 							; write end of dictionary zero.
              	
8621: CD7983  			call 	PAGERestore
8624: DDE1    			pop 	ix 									; restore and exit
8626: E1      			pop 	hl
8627: D1      	 		pop 	de
8628: C1      			pop 	bc
8629: F1      			pop 	af
862A: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;			Find word in dictionary. BC points to tagged string which is the name.
              	; 
              	;			On exit, HL is the address and E the page number with CC if found, 
              	;			CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
862B:         	DICTFindWord:
862B: C5      			push 	bc 								; save registers - return in EHL Carry
862C: DDE5    			push 	ix
              	
862E: 60      			ld 		h,b 							; put address of name in HL. 
862F: 69      			ld 		l,c
              	
8630: 3E20    			ld 		a,DictionaryPage 				; switch to dictionary page
8632: CD6083  			call 	PAGESwitch
              	
8635: DD2100C0			ld 		ix,$C000 						; dictionary start			
8639:         	__DICTFindMainLoop:
8639: DD7E00  			ld 		a,(ix+0)						; examine offset, exit if zero.
863C: B7      			or 		a
863D: 283A    			jr 		z,__DICTFindFail
              	
863F: DD7E04  			ld 		a,(ix+4) 						; length
8642: AE      			xor 	(hl) 							; xor with tag length
8643: E61F    			and 	$1F 							; check lower 5 bits
8645: 2029    			jr 		nz,__DICTFindNext 				; if different can't be this word.
              	
8647: DDE5    			push 	ix 								; save pointers on stack.
8649: E5      			push 	hl 
              	
864A: DD7E04  			ld 		a,(ix+4)						; get the word length to test into B
864D: E61F    			and 	$1F
864F: 47      			ld 		b,a 							; into B
8650: 23      			inc 	hl 								; skip over tag byte
8651:         	__DICTCheckName:
8651: DD7E05  			ld 		a,(ix+5) 						; compare dictionary vs character.
8654: BE      			cp 		(hl) 							; compare vs the matching character.
8655: 2016    			jr 		nz,__DICTFindNoMatch 			; no, not the same word.
8657: 23      			inc 	hl 								; HL point to next character
8658: DD23    			inc 	ix
865A: 10F5    			djnz 	__DICTCheckName
              	
865C: E1      			pop 	hl 								; Found a match. restore HL and IX
865D: DDE1    			pop 	ix
              		
865F: 1600    			ld 		d,0 							; D = 0 for neatness.
8661: DD5E01  			ld 		e,(ix+1)						; E = page
8664: DD6E02  			ld 		l,(ix+2)						; HL = address
8667: DD6603  			ld 		h,(ix+3)		
866A: AF      			xor 	a 								; clear the carry flag.
866B: 1813    			jr 		__DICTFindExit
              	
866D:         	__DICTFindNoMatch:								; this one doesn't match.
866D: E1      			pop 	hl 								; restore HL and IX
866E: DDE1    			pop 	ix
8670:         	__DICTFindNext:
8670: DD5E00  			ld 		e,(ix+0)						; DE = offset
8673: 1600    			ld 		d,$00
8675: DD19    			add 	ix,de 							; next word.
8677: 18C0    			jr 		__DICTFindMainLoop				; and try the next one.
              	
8679:         	__DICTFindFail:
8679: 110000  			ld 		de,$0000 						; return all zeros.
867C: 210000  			ld 		hl,$0000
867F: 37      			scf 									; set carry flag
8680:         	__DICTFindExit:
8680: F5      			push 	af
8681: CD7983  			call 	PAGERestore
8684: F1      			pop 	af
8685: DDE1    			pop 	ix 								; pop registers and return.
8687: C1      			pop 	bc
8688: C9      			ret
              			include "compiler/compiler.asm"				; compiler
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		compiler.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th December 2018
              	;		Purpose :	Compiles a list of word split by tags.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;					Compile word list at BC. HLDE contain A/B
              	;
              	; ***************************************************************************************
              	
8689:         	COMCompileWordList:
8689: C5      			push 	bc 									; save non value registers (HLDE can change)
868A: DDE5    			push 	ix
              	
868C:         	__COMWLoop:
868C: 0A      			ld 		a,(bc) 								; reached the end ?
868D: FE80    			cp 		$80
868F: 281E    			jr 		z,__COMWExit
              	
8691: 0A      			ld 		a,(bc) 								; 1 00 lllll (Red)
8692: E660    			and 	$60
8694: CCB986  			call 	z,COMDCompileRedWord 				
              	
8697: 0A      			ld 		a,(bc) 								; 1 01 lllll (Green)
8698: E660    			and 	$60
869A: FE20    			cp 		$20
869C: CCBA86  			call 	z,COMCCompileGreenWord
              	
869F: 0A      			ld 		a,(bc) 								; 1 10 lllll (Yellow)
86A0: E660    			and 	$60
86A2: FE40    			cp 		$40
86A4: CCBB86  			call 	z,COMXExecuteYellowWord
              	
86A7:         	__COMWNext: 										; advance to next tag.
86A7: 03      			inc 	bc 
86A8: 0A      			ld 		a,(bc)
86A9: CB7F    			bit 	7,a
86AB: 28FA    			jr 		z,__COMWNext
86AD: 18DD    			jr 		__COMWLoop 							; go do that.
              			
86AF:         	__COMWExit: 										; exit the routine
86AF: DDE1    			pop 	ix
86B1: C1      			pop 	bc
86B2: C9      			ret
              	;
              	;		Jump here on error.
              	;
86B3:         	COMError:
86B3: C5      			push 	bc
86B4: E1      			pop 	hl
86B5: 23      			inc 	hl
86B6: C32880  			jp 		ErrorHandler
              	
              	
              	; ***************************************************************************************
              	;
              	;	 		Compiles a red word. Add to the currently selected dictionary
              	;
              	; ***************************************************************************************
              	
86B9:         	COMDCompileRedWord:
86B9: C9      			ret
              		
              	; ***************************************************************************************
              	;
              	;										Green word.
              	;
              	; ***************************************************************************************
              	
86BA:         	COMCCompileGreenWord:	
86BA: C9      			ret
              	
              	; ***************************************************************************************
              	;
              	;						Execute the Yellow tagged word at BC
              	;
              	; ***************************************************************************************
              	
86BB:         	COMXExecuteYellowWord:		
86BB: C9      			ret
              			
              			
              	
              			include "temp/__words.asm"					; vocabulary file.
              	; =========== ! xmacro ===========
              	
86BC:         	start_21:
86BC: CD8D85  	    call COMUCopyCode
86BF: 04      	 db end_21-start_21-4
86C0: 73      	    ld   (hl),e
86C1: 23      	    inc  hl
86C2: 72      	    ld   (hl),d
86C3: 2B      	    dec  hl
86C4:         	end_21:
86C4: C9      	    ret
              	
              	; =========== * word ===========
              	
86C5: CD7C85  	    call COMUCompileCallToSelf
86C8:         	start_2a:
86C8: CD6081  	    call  MULTMultiply16
86CB: C9      	    ret
              	
              	; =========== + xmacro ===========
              	
86CC:         	start_2b:
86CC: CD8D85  	    call COMUCopyCode
86CF: 01      	 db end_2b-start_2b-4
86D0: 19      	    add  hl,de
86D1:         	end_2b:
86D1: C9      	    ret
              	
              	; =========== +! word ===========
              	
86D2: CD7C85  	    call COMUCompileCallToSelf
86D5:         	start_2b_21:
86D5: 7E      	    ld   a,(hl)
86D6: 83      	    add  a,e
86D7: 77      	    ld   (hl),a
86D8: 23      	    inc  hl
86D9: 7E      	    ld   a,(hl)
86DA: 8A      	    adc  a,d
86DB: 77      	    ld   (hl),a
86DC: 2B      	    dec  hl
86DD: C9      	    ret
              	
              	; =========== ++ xmacro ===========
              	
86DE:         	start_2b_2b:
86DE: CD8D85  	    call COMUCopyCode
86E1: 01      	 db end_2b_2b-start_2b_2b-4
86E2: 23      	    inc  hl
86E3:         	end_2b_2b:
86E3: C9      	    ret
              	
              	; =========== +++ xmacro ===========
              	
86E4:         	start_2b_2b_2b:
86E4: CD8D85  	    call COMUCopyCode
86E7: 02      	 db end_2b_2b_2b-start_2b_2b_2b-4
86E8: 23      	    inc  hl
86E9: 23      	    inc  hl
86EA:         	end_2b_2b_2b:
86EA: C9      	    ret
              	
              	; =========== +or word ===========
              	
86EB: CD7C85  	    call COMUCompileCallToSelf
86EE:         	start_2b_6f_72:
86EE: 7C      	    ld   a,h
86EF: B2      	    or   d
86F0: 67      	    ld   h,a
86F1: 7D      	    ld   a,l
86F2: B3      	    or   e
86F3: 6F      	    ld   l,a
86F4: C9      	    ret
              	
              	; =========== - xmacro ===========
              	
86F5:         	start_2d:
86F5: CD8D85  	    call COMUCopyCode
86F8: 06      	 db end_2d-start_2d-4
86F9: 7C      	    ld   a,h
86FA: 2F      	    cpl
86FB: 67      	    ld   h,a
86FC: 7D      	    ld   a,l
86FD: 2F      	    cpl
86FE: 6F      	    ld   l,a
86FF:         	end_2d:
86FF: C9      	    ret
              	
              	; =========== -- xmacro ===========
              	
8700:         	start_2d_2d:
8700: CD8D85  	    call COMUCopyCode
8703: 01      	 db end_2d_2d-start_2d_2d-4
8704: 2B      	    dec  hl
8705:         	end_2d_2d:
8705: C9      	    ret
              	
              	; =========== --- xmacro ===========
              	
8706:         	start_2d_2d_2d:
8706: CD8D85  	    call COMUCopyCode
8709: 02      	 db end_2d_2d_2d-start_2d_2d_2d-4
870A: 2B      	    dec  hl
870B: 2B      	    dec  hl
870C:         	end_2d_2d_2d:
870C: C9      	    ret
              	
              	; =========== / word ===========
              	
870D: CD7C85  	    call COMUCompileCallToSelf
8710:         	start_2f:
8710: D5      	    push  de
8711: CD7A81  	    call  DIVDivideMod16
8714: EB      	    ex   de,hl
8715: D1      	    pop  de
8716: C9      	    ret
              	
              	; =========== /mod word ===========
              	
8717: CD7C85  	    call COMUCompileCallToSelf
871A:         	start_2f_6d_6f_64:
871A: CD7A81  	    call  DIVDivideMod16
871D: EB      	    ex  de,hl
871E: C9      	    ret
              	
              	; =========== 1, word ===========
              	
871F: CD7C85  	    call COMUCompileCallToSelf
8722:         	start_31_2c:
8722: 7D      	    ld   a,l
8723: CDA581  	    call  FARCompileByte
8726: C9      	    ret
              	
              	; =========== 2* xmacro ===========
              	
8727:         	start_32_2a:
8727: CD8D85  	    call COMUCopyCode
872A: 01      	 db end_32_2a-start_32_2a-4
872B: 29      	    add  hl,hl
872C:         	end_32_2a:
872C: C9      	    ret
              	
              	; =========== 2, word ===========
              	
872D: CD7C85  	    call COMUCompileCallToSelf
8730:         	start_32_2c:
8730: CDBD81  	    call FARCompileWord
8733: C9      	    ret
              	
              	; =========== 2/ xmacro ===========
              	
8734:         	start_32_2f:
8734: CD8D85  	    call COMUCopyCode
8737: 04      	 db end_32_2f-start_32_2f-4
8738: CB2C    	    sra  h
873A: CB1D    	    rr   l
873C:         	end_32_2f:
873C: C9      	    ret
              	
              	; =========== ; macro ===========
              	
873D:         	start_3b:
873D: 00      	    nop
873E: CD8D85  	    call COMUCopyCode
8741: 02      	 db end_3b-start_3b-4
8742: C9      	    ret
8743:         	end_3b:
8743: C9      	    ret
              	
              	; =========== < word ===========
              	
8744: CD7C85  	    call COMUCompileCallToSelf
8747:         	start_3c:
              	    ; checking if B < A
8747: 7C      	    ld   a,h         ; signs different ??
8748: AA      	    xor  d
8749: FA5787  	    jp   m,__Less_DiffSigns
874C: D5      	    push  de
874D: EB      	    ex   de,hl         ; HL = B, DE = A
874E: ED52    	    sbc  hl,de         ; calculate B-A, CS if -ve e.g. B < A
8750: D1      	    pop  de
8751: 210000  	    ld   hl,$0000        ; so return 0 if B-A doesn't generate a borrow
8754: D0      	    ret  nc
8755: 2B      	    dec  hl
8756: C9      	    ret
8757:         	__Less_DiffSigns:
8757: CB7A    	    bit  7,d         ; if B bit 7 is set, -ve B must be < A
8759: 210000  	    ld   hl,$0000
875C: C8      	    ret  z          ; so return zero if not set
875D: 2B      	    dec  hl
875E: C9      	    ret
875F: C9      	    ret
              	
              	; =========== = word ===========
              	
8760: CD7C85  	    call COMUCompileCallToSelf
8763:         	start_3d:
8763: 7C      	    ld   a,h         ; D = H^D
8764: AA      	    xor  d
8765: 67      	    ld   h,a
8766: 7D      	    ld   a,l         ; A = L^E | H^D
8767: AB      	    xor  e
8768: B4      	    or   h
8769: 210000  	    ld   hl,$0000        ; return 0 if any differences.
876C: C0      	    ret  nz
876D: 2B      	    dec  hl
876E: C9      	    ret
              	
              	; =========== @ xmacro ===========
              	
876F:         	start_40:
876F: CD8D85  	    call COMUCopyCode
8772: 04      	 db end_40-start_40-4
8773: 7E      	    ld   a,(hl)
8774: 23      	    inc  hl
8775: 66      	    ld   h,(hl)
8776: 6F      	    ld   l,a
8777:         	end_40:
8777: C9      	    ret
              	
              	; =========== a>b xmacro ===========
              	
8778:         	start_61_3e_62:
8778: CD8D85  	    call COMUCopyCode
877B: 02      	 db end_61_3e_62-start_61_3e_62-4
877C: 5D      	    ld   e,l
877D: 54      	    ld   d,h
877E:         	end_61_3e_62:
877E: C9      	    ret
              	
              	; =========== a>r macro ===========
              	
877F:         	start_61_3e_72:
877F: 00      	    nop
8780: CD8D85  	    call COMUCopyCode
8783: 02      	 db end_61_3e_72-start_61_3e_72-4
8784: E5      	    push  hl
8785:         	end_61_3e_72:
8785: C9      	    ret
              	
              	; =========== ab>r macro ===========
              	
8786:         	start_61_62_3e_72:
8786: 00      	    nop
8787: CD8D85  	    call COMUCopyCode
878A: 03      	 db end_61_62_3e_72-start_61_62_3e_72-4
878B: E5      	    push  hl
878C: D5      	    push  de
878D:         	end_61_62_3e_72:
878D: C9      	    ret
              	
              	; =========== abs word ===========
              	
878E: CD7C85  	    call COMUCompileCallToSelf
8791:         	start_61_62_73:
8791: CB7C    	    bit  7,h
8793: C23B88  	    jp   nz,__Negate
8796: C9      	    ret
              	
              	; =========== and word ===========
              	
8797: CD7C85  	    call COMUCompileCallToSelf
879A:         	start_61_6e_64:
879A: 7C      	    ld   a,h
879B: A2      	    and  d
879C: 67      	    ld   h,a
879D: 7D      	    ld   a,l
879E: A3      	    and  e
879F: 6F      	    ld   l,a
87A0: C9      	    ret
              	
              	; =========== b! xmacro ===========
              	
87A1:         	start_62_21:
87A1: CD8D85  	    call COMUCopyCode
87A4: 01      	 db end_62_21-start_62_21-4
87A5: 73      	    ld   (hl),e
87A6:         	end_62_21:
87A6: C9      	    ret
              	
              	; =========== b>a xmacro ===========
              	
87A7:         	start_62_3e_61:
87A7: CD8D85  	    call COMUCopyCode
87AA: 02      	 db end_62_3e_61-start_62_3e_61-4
87AB: 6B      	    ld   l,e
87AC: 62      	    ld   h,d
87AD:         	end_62_3e_61:
87AD: C9      	    ret
              	
              	; =========== b>r macro ===========
              	
87AE:         	start_62_3e_72:
87AE: 00      	    nop
87AF: CD8D85  	    call COMUCopyCode
87B2: 02      	 db end_62_3e_72-start_62_3e_72-4
87B3: D5      	    push  de
87B4:         	end_62_3e_72:
87B4: C9      	    ret
              	
              	; =========== b@ xmacro ===========
              	
87B5:         	start_62_40:
87B5: CD8D85  	    call COMUCopyCode
87B8: 03      	 db end_62_40-start_62_40-4
87B9: 6E      	    ld   l,(hl)
87BA: 2600    	    ld   h,$00
87BC:         	end_62_40:
87BC: C9      	    ret
              	
              	; =========== break macro ===========
              	
87BD:         	start_62_72_65_61_6b:
87BD: 00      	    nop
87BE: CD8D85  	    call COMUCopyCode
87C1: 03      	 db end_62_72_65_61_6b-start_62_72_65_61_6b-4
87C2: DD01    	    db   $DD,$01
87C4:         	end_62_72_65_61_6b:
87C4: C9      	    ret
              	
              	; =========== bswap xmacro ===========
              	
87C5:         	start_62_73_77_61_70:
87C5: CD8D85  	    call COMUCopyCode
87C8: 03      	 db end_62_73_77_61_70-start_62_73_77_61_70-4
87C9: 7C      	    ld   a,h
87CA: 65      	    ld   h,l
87CB: 6F      	    ld   l,a
87CC:         	end_62_73_77_61_70:
87CC: C9      	    ret
              	
              	; =========== copy word ===========
              	
87CD: CD7C85  	    call COMUCompileCallToSelf
87D0:         	start_63_6f_70_79:
              	    ; B (DE) = source A (HL) = target
87D0: ED4BAA8B	    ld   bc,(Parameter)       ; get count
87D4: 78      	    ld   a,b         ; zero check
87D5: B1      	    or   c
87D6: 2817    	    jr   z,__copyExit
87D8: D5      	    push  de          ; save A/B
87D9: E5      	    push  hl
87DA: AF      	    xor  a          ; find direction.
87DB: ED52    	    sbc  hl,de
87DD: 7C      	    ld   a,h
87DE: 19      	    add  hl,de
87DF: CB7F    	    bit  7,a         ; if +ve use LDDR
87E1: 2805    	    jr   z,__copy2
87E3: EB      	    ex   de,hl         ; LDIR etc do (DE) <- (HL)
87E4: EDB0    	    ldir
87E6: 1807    	    jr   __copyExit
87E8:         	__copy2:
87E8: 09      	    add  hl,bc         ; add length to HL,DE, swap as LDDR does (DE) <- (HL)
87E9: EB      	    ex   de,hl
87EA: 09      	    add  hl,bc
87EB: 1B      	    dec  de          ; -1 to point to last byte
87EC: 2B      	    dec  hl
87ED: EDB8    	    lddr
87EF:         	__copyExit:
87EF: E1      	    pop  hl
87F0: D1      	    pop  de
87F1: C9      	    ret
              	
              	; =========== debug word ===========
              	
87F2: CD7C85  	    call COMUCompileCallToSelf
87F5:         	start_64_65_62_75_67:
87F5: CDEA80  	    call  DEBUGShow
87F8: C9      	    ret
              	
              	; =========== fill word ===========
              	
87F9: CD7C85  	    call COMUCompileCallToSelf
87FC:         	start_66_69_6c_6c:
87FC: ED4BAA8B	    ld   bc,(Parameter)       ; count to do.
8800: 78      	    ld   a,b
8801: B1      	    or   c
8802: 2809    	    jr   z,__fillExit       ; if count zero exit.
8804: D5      	    push  de
8805: E5      	    push  hl
8806:         	__fillLoop:
8806: 73      	    ld   (hl),e
8807: 23      	    inc  hl
8808: 0B      	    dec  bc
8809: 78      	    ld   a,b
880A: B1      	    or   c
880B: 20F9    	    jr   nz,__fillLoop
880D:         	__fillExit:
880D: E1      	    pop  hl
880E: D1      	    pop  de
880F: C9      	    ret
              	
              	; =========== h word ===========
              	
8810: CD7C85  	    call COMUCompileCallToSelf
8813:         	start_68:
8813: EB      	    ex   de,hl
8814: 219E8B  	    ld   hl,Here
8817: C9      	    ret
              	
              	; =========== halt word ===========
              	
8818: CD7C85  	    call COMUCompileCallToSelf
881B:         	start_68_61_6c_74:
881B:         	__haltz80:
881B: F3      	    di
881C: 76      	    halt
881D: 18FC    	    jr   __haltz80
881F: C9      	    ret
              	
              	; =========== here word ===========
              	
8820: CD7C85  	    call COMUCompileCallToSelf
8823:         	start_68_65_72_65:
8823: EB      	    ex   de,hl
8824: 2A9E8B  	    ld   hl,(Here)
8827: C9      	    ret
              	
              	; =========== hex! word ===========
              	
8828: CD7C85  	    call COMUCompileCallToSelf
882B:         	start_68_65_78_21:
              	    ; DE = word, HL = pos
882B: CD2A82  	    call  GFXWriteHexWord      ; write out the word
882E: C9      	    ret
              	
              	; =========== mod word ===========
              	
882F: CD7C85  	    call COMUCompileCallToSelf
8832:         	start_6d_6f_64:
8832: D5      	    push  de
8833: CD7A81  	    call  DIVDivideMod16
8836: D1      	    pop  de
8837: C9      	    ret
              	
              	; =========== negate word ===========
              	
8838: CD7C85  	    call COMUCompileCallToSelf
883B:         	start_6e_65_67_61_74_65:
883B:         	__Negate:
883B: 7C      	    ld   a,h
883C: 2F      	    cpl
883D: 67      	    ld   h,a
883E: 7D      	    ld   a,l
883F: 2F      	    cpl
8840: 6F      	    ld   l,a
8841: 23      	    inc  hl
8842: C9      	    ret
              	
              	; =========== or word ===========
              	
8843: CD7C85  	    call COMUCompileCallToSelf
8846:         	start_6f_72:
8846: 7C      	    ld   a,h
8847: AA      	    xor  d
8848: 67      	    ld   h,a
8849: 7D      	    ld   a,l
884A: AB      	    xor  e
884B: 6F      	    ld   l,a
884C: C9      	    ret
              	
              	; =========== or! word ===========
              	
884D: CD7C85  	    call COMUCompileCallToSelf
8850:         	start_6f_72_21:
8850: 7E      	    ld   a,(hl)
8851: B3      	    or   e
8852: 77      	    ld   (hl),a
8853: 23      	    inc  hl
8854: 7E      	    ld   a,(hl)
8855: B2      	    or   d
8856: 77      	    ld   (hl),a
8857: 2B      	    dec  hl
8858: C9      	    ret
              	
              	; =========== p! xmacro ===========
              	
8859:         	start_70_21:
8859: CD8D85  	    call COMUCopyCode
885C: 04      	 db end_70_21-start_70_21-4
885D: 4D      	    ld   c,l
885E: 44      	    ld   b,h
885F: ED59    	    out  (c),e
8861:         	end_70_21:
8861: C9      	    ret
              	
              	; =========== p@ word ===========
              	
8862: CD7C85  	    call COMUCompileCallToSelf
8865:         	start_70_40:
8865: 4D      	    ld   c,l
8866: 44      	    ld   b,h
8867: ED68    	    in   l,(c)
8869: 2600    	    ld   h,0
886B: C9      	    ret
              	
              	; =========== param! word ===========
              	
886C: CD7C85  	    call COMUCompileCallToSelf
886F:         	start_70_61_72_61_6d_21:
886F: 22AA8B  	    ld   (Parameter),hl
8872: C9      	    ret
              	
              	; =========== pop macro ===========
              	
8873:         	start_70_6f_70:
8873: 00      	    nop
8874: CD8D85  	    call COMUCopyCode
8877: 03      	 db end_70_6f_70-start_70_6f_70-4
8878: EB      	    ex   de,hl
8879: E1      	    pop  hl
887A:         	end_70_6f_70:
887A: C9      	    ret
              	
              	; =========== push macro ===========
              	
887B:         	start_70_75_73_68:
887B: 00      	    nop
887C: CD8D85  	    call COMUCopyCode
887F: 02      	 db end_70_75_73_68-start_70_75_73_68-4
8880: E5      	    push  hl
8881:         	end_70_75_73_68:
8881: C9      	    ret
              	
              	; =========== r>a macro ===========
              	
8882:         	start_72_3e_61:
8882: 00      	    nop
8883: CD8D85  	    call COMUCopyCode
8886: 02      	 db end_72_3e_61-start_72_3e_61-4
8887: E1      	    pop  hl
8888:         	end_72_3e_61:
8888: C9      	    ret
              	
              	; =========== r>ab macro ===========
              	
8889:         	start_72_3e_61_62:
8889: 00      	    nop
888A: CD8D85  	    call COMUCopyCode
888D: 03      	 db end_72_3e_61_62-start_72_3e_61_62-4
888E: D1      	    pop  de
888F: E1      	    pop  hl
8890:         	end_72_3e_61_62:
8890: C9      	    ret
              	
              	; =========== r>b macro ===========
              	
8891:         	start_72_3e_62:
8891: 00      	    nop
8892: CD8D85  	    call COMUCopyCode
8895: 02      	 db end_72_3e_62-start_72_3e_62-4
8896: D1      	    pop  de
8897:         	end_72_3e_62:
8897: C9      	    ret
              	
              	; =========== swap xmacro ===========
              	
8898:         	start_73_77_61_70:
8898: CD8D85  	    call COMUCopyCode
889B: 01      	 db end_73_77_61_70-start_73_77_61_70-4
889C: EB      	    ex   de,hl         ; 2nd now TOS
889D:         	end_73_77_61_70:
889D: C9      	    ret
              	
              			
889E:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
889E: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
88A2: 00000000	
88A6: 0C1E1E0C	
88AA: 0C000C00	
88AE: 36360000	
88B2: 00000000	
88B6: 36367F36	
88BA: 7F363600	
88BE: 183E603C	
88C2: 067C1800	
88C6: 0063660C	
88CA: 18336300	
88CE: 1C361C3B	
88D2: 6E663B00	
88D6: 30306000	
88DA: 00000000	
88DE: 0C183030	
88E2: 30180C00	
88E6: 30180C0C	
88EA: 0C183000	
88EE: 00331E7F	
88F2: 1E330000	
88F6: 0018187E	
88FA: 18180000	
88FE: 00000000	
8902: 00181830	
8906: 0000007E	
890A: 00000000	
890E: 00000000	
8912: 00181800	
8916: 03060C18	
891A: 30604000	
891E: 3E63676F	
8922: 7B733E00	
8926: 18381818	
892A: 18187E00	
892E: 3C66061C	
8932: 30667E00	
8936: 3C66061C	
893A: 06663C00	
893E: 0E1E3666	
8942: 7F060F00	
8946: 7E607C06	
894A: 06663C00	
894E: 1C30607C	
8952: 66663C00	
8956: 7E66060C	
895A: 18181800	
895E: 3C66663C	
8962: 66663C00	
8966: 3C66663E	
896A: 060C3800	
896E: 00181800	
8972: 00181800	
8976: 00181800	
897A: 00181830	
897E: 0C183060	
8982: 30180C00	
8986: 00007E00	
898A: 007E0000	
898E: 30180C06	
8992: 0C183000	
8996: 3C66060C	
899A: 18001800	
899E: 3E636F6F	
89A2: 6F603C00	
89A6: 183C6666	
89AA: 7E666600	
89AE: 7E33333E	
89B2: 33337E00	
89B6: 1E336060	
89BA: 60331E00	
89BE: 7C363333	
89C2: 33367C00	
89C6: 7F31343C	
89CA: 34317F00	
89CE: 7F31343C	
89D2: 34307800	
89D6: 1E336060	
89DA: 67331F00	
89DE: 6666667E	
89E2: 66666600	
89E6: 3C181818	
89EA: 18183C00	
89EE: 0F060606	
89F2: 66663C00	
89F6: 7333363C	
89FA: 36337300	
89FE: 78303030	
8A02: 31337F00	
8A06: 63777F7F	
8A0A: 6B636300	
8A0E: 63737B6F	
8A12: 67636300	
8A16: 1C366363	
8A1A: 63361C00	
8A1E: 7E33333E	
8A22: 30307800	
8A26: 3C666666	
8A2A: 6E3C0E00	
8A2E: 7E33333E	
8A32: 36337300	
8A36: 3C667038	
8A3A: 0E663C00	
8A3E: 7E5A1818	
8A42: 18183C00	
8A46: 66666666	
8A4A: 66667E00	
8A4E: 66666666	
8A52: 663C1800	
8A56: 6363636B	
8A5A: 7F776300	
8A5E: 6363361C	
8A62: 1C366300	
8A66: 6666663C	
8A6A: 18183C00	
8A6E: 7F63460C	
8A72: 19337F00	
8A76: 3C303030	
8A7A: 30303C00	
8A7E: 6030180C	
8A82: 06030100	
8A86: 3C0C0C0C	
8A8A: 0C0C3C00	
8A8E: 081C3663	
8A92: 00000000	
8A96: 00000000	
8A9A: 0000007F	
8A9E: 18180C00	
8AA2: 00000000	
8AA6: 00003C06	
8AAA: 3E663B00	
8AAE: 7030303E	
8AB2: 33336E00	
8AB6: 00003C66	
8ABA: 60663C00	
8ABE: 0E06063E	
8AC2: 66663B00	
8AC6: 00003C66	
8ACA: 7E603C00	
8ACE: 1C363078	
8AD2: 30307800	
8AD6: 00003B66	
8ADA: 663E067C	
8ADE: 7030363B	
8AE2: 33337300	
8AE6: 18003818	
8AEA: 18183C00	
8AEE: 06000606	
8AF2: 0666663C	
8AF6: 70303336	
8AFA: 3C367300	
8AFE: 38181818	
8B02: 18183C00	
8B06: 0000667F	
8B0A: 7F6B6300	
8B0E: 00007C66	
8B12: 66666600	
8B16: 00003C66	
8B1A: 66663C00	
8B1E: 00006E33	
8B22: 333E3078	
8B26: 00003B66	
8B2A: 663E060F	
8B2E: 00006E3B	
8B32: 33307800	
8B36: 00003E60	
8B3A: 3C067C00	
8B3E: 08183E18	
8B42: 181A0C00	
8B46: 00006666	
8B4A: 66663B00	
8B4E: 00006666	
8B52: 663C1800	
8B56: 0000636B	
8B5A: 7F7F3600	
8B5E: 00006336	
8B62: 1C366300	
8B66: 00006666	
8B6A: 663E067C	
8B6E: 00007E4C	
8B72: 18327E00	
8B76: 0E181870	
8B7A: 18180E00	
8B7E: 0C0C0C00	
8B82: 0C0C0C00	
8B86: 7018180E	
8B8A: 18187000	
8B8E: 3B6E0000	
8B92: 00000000	
8B96: 00...   	
              	
              			include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th December 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;								System Information
              	;
              	; ***************************************************************************************
              	
8B9E:         	SystemInformation:
              	
8B9E:         	Here:												; +0 	Here 
8B9E: 00A0    			dw 		FreeMemory
8BA0:         	HerePage: 											; +2	Here.Page
8BA0: 2A00    			db 		FirstCodePage,0
8BA2:         	NextFreePage: 										; +4 	Next available code page.
8BA2: 2B000000			db 		FirstCodePage+1,0,0,0
8BA6:         	DisplayInfo: 										; +8 	Display information
8BA6: AE8B0000			dw 		DisplayInformation,0		
8BAA:         	Parameter: 											; +12 	Third Parameter used in some functions.
8BAA: 00000000			dw 		0,0
              	
              	; ***************************************************************************************
              	;
              	;							 Display system information
              	;
              	; ***************************************************************************************
              	
8BAE:         	DisplayInformation:
              	
8BAE:         	__DIScreenWidth: 									; +0 	screen width
8BAE: 00000000			db 		0,0,0,0
8BB2:         	__DIScreenHeight:									; +4 	screen height
8BB2: 00000000			db 		0,0,0,0
8BB6:         	__DIScreenSize:										; +8 	char size of screen
8BB6: 00000000			dw 		0,0		
8BBA:         	__DIScreenMode:										; +12 	current mode
8BBA: 00000000			db 		0,0,0,0
8BBE:         	__DIFontBase:										; font in use
8BBE: 9E88    			dw 		AlternateFont
8BC0:         	__DIScreenDriver:									; Screen Driver
8BC0: 0000    			dw 		0	
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8BC2:         	__ARegister:										; register values when not running.
8BC2: 0000    			dw 		0
8BC4:         	__BRegister:
8BC4: 0000    			dw 		0
              	
              	
8BC6:         	__PAGEStackPointer: 								; stack used for switching pages
8BC6: 0000    			dw 		0
8BC8:         	__PAGEStackBase:
8BC8: FFFFFFFF			ds 		16
8BCC: FF...   	
              	
8BD8:         	__CLICurrentKey: 									; current inkey state on CLI
8BD8: 00      			db 		0
              	
8BD9: 86      			db 		$86 								; buffer for executing, tags it yellow effectively.
8BDA:         	__CLIBuffer:
8BDA: FFFFFFFF			ds 		20
8BDE: FF...   	
              	
8BEE: FFFFFFFF			org 	$A000
8BF2: FF...   	
A000:         	FreeMemory:		
A000: FFFFFFFF			org 	$C000
A004: FF...   	
C000: 00      			db 		0 									; start of dictionary, which is empty.
              	


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4001 = 16385

; +++ global symbols +++

AlternateFont         = $889E = 34974          kernel.asm:64
BUFFScan              = $8523 = 34083          buffer.asm:18
Boot                  = $8006 = 32774          kernel.asm:32
COMCCompileGreenWord  = $86BA = 34490          compiler.asm:77
COMCompileWordList    = $8689 = 34441          compiler.asm:18
COMDCompileRedWord    = $86B9 = 34489          compiler.asm:68
COMError              = $86B3 = 34483          compiler.asm:55 (unused)
COMUCompileCallToSelf = $857C = 34172          utility.asm:18
COMUCompileConstant   = $857F = 34175          utility.asm:28 (unused)
COMUCopyCode          = $858D = 34189          utility.asm:42
COMXExecuteYellowWord = $86BB = 34491          compiler.asm:86
CONSTConvert          = $859A = 34202          constant.asm:19 (unused)
CommandLineStart      = $801A = 32794          command.asm:12
DEBUGShow             = $80EA = 33002          debug.asm:12
DICTAddWord           = $85D7 = 34263          dictionary.asm:19 (unused)
DICTFindWord          = $862B = 34347          dictionary.asm:89 (unused)
DIVDivideMod16        = $817A = 33146          divide.asm:18
DictionaryPage        = $0020 =    32          kernel.asm:16
DisplayInfo           = $8BA6 = 35750          data.asm:26 (unused)
DisplayInformation    = $8BAE = 35758          data.asm:37
Div16_Loop1           = $8184 = 33156          divide.asm:27
Div16_Loop2           = $8195 = 33173          divide.asm:41
Div16_NoAdd1          = $818C = 33164          divide.asm:33
Div16_NoAdd2          = $819D = 33181          divide.asm:47
EditBuffer            = $7B08 = 31496          kernel.asm:24
EditPageSize          = $0200 =   512          kernel.asm:19
ErrorHandler          = $8028 = 32808          command.asm:20
FARCompileByte        = $81A5 = 33189          farmemory.asm:18
FARCompileWord        = $81BD = 33213          farmemory.asm:40
FirstCodePage         = $002A =    42          kernel.asm:20
FirstSourcePage       = $0022 =    34          kernel.asm:17
FreeMemory            = $A000 = 40960          data.asm:77
GFXClearScreen        = $81D8 = 33240          graphics.asm:18 (unused)
GFXGetFontGraphicDE   = $825C = 33372          graphics.asm:145
GFXInitialise48k      = $838F = 33679          screen48k.asm:19
GFXInitialiseLayer2   = $83F2 = 33778          screen_layer2.asm:19
GFXInitialiseLowRes   = $849E = 33950          screen_lores.asm:18
GFXMode               = $81E2 = 33250          graphics.asm:33
GFXModeE              = $81E1 = 33249          graphics.asm:31 (unused)
GFXPrintCharacter48k  = $83BB = 33723          screen48k.asm:53
GFXPrintCharacterLayer2 = $8422 = 33826          screen_layer2.asm:56
GFXPrintCharacterLowRes = $84C8 = 33992          screen_lores.asm:50
GFXWriteCharacter     = $8217 = 33303          graphics.asm:77
GFXWriteHexWord       = $822A = 33322          graphics.asm:100
GFXWriteHexWordA      = $822C = 33324          graphics.asm:102 (unused)
Here                  = $8B9E = 35742          data.asm:20
HerePage              = $8BA0 = 35744          data.asm:22
IOScanKeyboard        = $8281 = 33409          keyboard.asm:18
L2PClear              = $83FB = 33787          screen_layer2.asm:26
L2PClearBank          = $840B = 33803          screen_layer2.asm:35
LowClearScreen        = $84B1 = 33969          screen_lores.asm:30
MULTMultiply16        = $8160 = 33120          multiply.asm:18
NextFreePage          = $8BA2 = 35746          data.asm:24 (unused)
PAGEInitialise        = $834E = 33614          paging.asm:18
PAGERestore           = $8379 = 33657          paging.asm:64
PAGESwitch            = $8360 = 33632          paging.asm:36
Parameter             = $8BAA = 35754          data.asm:28
SourcePageCount       = $0004 =     4          kernel.asm:18
StackTop              = $7EFC = 32508          kernel.asm:25
SystemInformation     = $8B9E = 35742          data.asm:18
WarmStart             = $8021 = 32801          command.asm:16
WarmStartSetup        = $802A = 32810          command.asm:22
__ARegister           = $8BC2 = 35778          data.asm:58
__BRegister           = $8BC4 = 35780          data.asm:60
__BUFFNextPage        = $8568 = 34152          buffer.asm:57
__BUFFScanNextPageInBuffer = $8540 = 34112          buffer.asm:36
__BUFFScanSourcePage  = $8538 = 34104          buffer.asm:29
__CLIBuffer           = $8BDA = 35802          data.asm:73
__CLIChangeLoop       = $80C8 = 32968          command.asm:112
__CLIClear            = $803C = 32828          command.asm:33
__CLICurrentKey       = $8BD8 = 35800          data.asm:69
__CLIExecute          = $809B = 32923          command.asm:87
__CLIGetChange        = $80C3 = 32963          command.asm:108
__CLIGetKey           = $80BC = 32956          command.asm:103
__CLILoop             = $8072 = 32882          command.asm:64
__CLIPrompt           = $804E = 32846          command.asm:45
__CLIPromptExit       = $805D = 32861          command.asm:55
__CLIWarmStart        = $80E4 = 32996          command.asm:122
__CLIWelcome          = $80D3 = 32979          command.asm:120
__COMUCopyLoop        = $8590 = 34192          utility.asm:46
__COMWExit            = $86AF = 34479          compiler.asm:48
__COMWLoop            = $868C = 34444          compiler.asm:22
__COMWNext            = $86A7 = 34471          compiler.asm:41
__CONConFail          = $85D4 = 34260          constant.asm:75
__CONConvLoop         = $85A1 = 34209          constant.asm:27
__CONMinusExit        = $85C4 = 34244          constant.asm:56
__CONNotNegative      = $85D1 = 34257          constant.asm:70
__Core__Mult_Loop     = $8167 = 33127          multiply.asm:24
__Core__Mult_Shift    = $816C = 33132          multiply.asm:28
__DEBUGPrintDERecursively = $8147 = 33095          debug.asm:79
__DEBUGPrintDecNotNegative = $8138 = 33080          debug.asm:68
__DEBUGPrintDecimalInteger = $812C = 33068          debug.asm:57
__DEBUGShowClear      = $80F9 = 33017          debug.asm:25
__DICTAddCopy         = $8614 = 34324          dictionary.asm:63
__DICTCheckName       = $8651 = 34385          dictionary.asm:117
__DICTCreateEntry     = $85FA = 34298          dictionary.asm:48
__DICTFindEndDictionary = $85ED = 34285          dictionary.asm:39
__DICTFindExit        = $8680 = 34432          dictionary.asm:148
__DICTFindFail        = $8679 = 34425          dictionary.asm:144
__DICTFindMainLoop    = $8639 = 34361          dictionary.asm:100
__DICTFindNext        = $8670 = 34416          dictionary.asm:138
__DICTFindNoMatch     = $866D = 34413          dictionary.asm:135
__DIFontBase          = $8BBE = 35774          data.asm:47
__DIScreenDriver      = $8BC0 = 35776          data.asm:49
__DIScreenHeight      = $8BB2 = 35762          data.asm:41
__DIScreenMode        = $8BBA = 35770          data.asm:45
__DIScreenSize        = $8BB6 = 35766          data.asm:43
__DIScreenWidth       = $8BAE = 35758          data.asm:39
__GFXConfigure        = $81FC = 33276          graphics.asm:54
__GFXLayer2           = $81F4 = 33268          graphics.asm:47
__GFXLowRes           = $81F9 = 33273          graphics.asm:51
__GFXPromptCharacter  = $8279 = 33401          graphics.asm:167
__GFXWCExit           = $8225 = 33317          graphics.asm:87
__GFXWHByte           = $823E = 33342          graphics.asm:118
__GFXWHDigit          = $8254 = 33364          graphics.asm:132
__GFXWHNibble         = $824B = 33355          graphics.asm:126
__L2Blank             = $8482 = 33922          screen_layer2.asm:135
__L2Exit              = $8497 = 33943          screen_layer2.asm:157
__L2Exit1             = $8492 = 33938          screen_layer2.asm:152
__L2Loop              = $8476 = 33910          screen_layer2.asm:125
__L2Not1              = $8438 = 33848          screen_layer2.asm:76
__L2Not2              = $843E = 33854          screen_layer2.asm:80
__L2Not3              = $8444 = 33860          screen_layer2.asm:84
__L2NotSet            = $847C = 33916          screen_layer2.asm:130
__L2Outer             = $846B = 33899          screen_layer2.asm:118
__LPExit              = $851C = 34076          screen_lores.asm:120
__Less_DiffSigns      = $8757 = 34647          __words.asm:185
__LowLoop             = $8508 = 34056          screen_lores.asm:104
__LowNotLower2        = $84FE = 34046          screen_lores.asm:97
__LowNotSet           = $850E = 34062          screen_lores.asm:109
__LowOuter            = $8500 = 34048          screen_lores.asm:99
__Negate              = $883B = 34875          __words.asm:439
__PAGEStackBase       = $8BC8 = 35784          data.asm:66
__PAGEStackPointer    = $8BC6 = 35782          data.asm:64
__ZXWCCopy            = $83E7 = 33767          screen48k.asm:101
__ZXWCExit            = $83ED = 33773          screen48k.asm:107
___kr4                = $82B2 = 33458          keyboard.asm:49
__copy2               = $87E8 = 34792          __words.asm:351
__copyExit            = $87EF = 34799          __words.asm:358
__cs1                 = $839F = 33695          screen48k.asm:29
__cs2                 = $83A7 = 33703          screen48k.asm:34
__fillExit            = $880D = 34829          __words.asm:387
__fillLoop            = $8806 = 34822          __words.asm:380
__haltz80             = $881B = 34843          __words.asm:404
__kr1                 = $8296 = 33430          keyboard.asm:32
__kr2                 = $82A1 = 33441          keyboard.asm:38
__kr3                 = $82A3 = 33443          keyboard.asm:41
__kr_exit             = $82D2 = 33490          keyboard.asm:79
__kr_keypressed       = $82CC = 33484          keyboard.asm:73
__kr_no_shift_table   = $82D6 = 33494          keyboard.asm:94
__kr_shift_table      = $82FE = 33534          keyboard.asm:100
__kr_symbol_shift_table = $82FE = 33534          keyboard.asm:101
_end                  = $C001 = 49153          kernel.asm:26 (unused)
_size                 = $4001 = 16385          kernel.asm:26 (unused)
end_21                = $86C4 = 34500          __words.asm:10
end_2b                = $86D1 = 34513          __words.asm:26
end_2b_2b             = $86E3 = 34531          __words.asm:49
end_2b_2b_2b          = $86EA = 34538          __words.asm:59
end_2d                = $86FF = 34559          __words.asm:85
end_2d_2d             = $8705 = 34565          __words.asm:94
end_2d_2d_2d          = $870C = 34572          __words.asm:104
end_32_2a             = $872C = 34604          __words.asm:139
end_32_2f             = $873C = 34620          __words.asm:156
end_3b                = $8743 = 34627          __words.asm:166
end_40                = $8777 = 34679          __words.asm:217
end_61_3e_62          = $877E = 34686          __words.asm:227
end_61_3e_72          = $8785 = 34693          __words.asm:237
end_61_62_3e_72       = $878D = 34701          __words.asm:248
end_62_21             = $87A6 = 34726          __words.asm:277
end_62_3e_61          = $87AD = 34733          __words.asm:287
end_62_3e_72          = $87B4 = 34740          __words.asm:297
end_62_40             = $87BC = 34748          __words.asm:307
end_62_72_65_61_6b    = $87C4 = 34756          __words.asm:317
end_62_73_77_61_70    = $87CC = 34764          __words.asm:328
end_70_21             = $8861 = 34913          __words.asm:483
end_70_6f_70          = $887A = 34938          __words.asm:511
end_70_75_73_68       = $8881 = 34945          __words.asm:521
end_72_3e_61          = $8888 = 34952          __words.asm:531
end_72_3e_61_62       = $8890 = 34960          __words.asm:542
end_72_3e_62          = $8897 = 34967          __words.asm:552
end_73_77_61_70       = $889D = 34973          __words.asm:561
start_21              = $86BC = 34492          __words.asm:3
start_2a              = $86C8 = 34504          __words.asm:16 (unused)
start_2b              = $86CC = 34508          __words.asm:22
start_2b_21           = $86D5 = 34517          __words.asm:32 (unused)
start_2b_2b           = $86DE = 34526          __words.asm:45
start_2b_2b_2b        = $86E4 = 34532          __words.asm:54
start_2b_6f_72        = $86EE = 34542          __words.asm:65 (unused)
start_2d              = $86F5 = 34549          __words.asm:76
start_2d_2d           = $8700 = 34560          __words.asm:90
start_2d_2d_2d        = $8706 = 34566          __words.asm:99
start_2f              = $8710 = 34576          __words.asm:110 (unused)
start_2f_6d_6f_64     = $871A = 34586          __words.asm:120 (unused)
start_31_2c           = $8722 = 34594          __words.asm:128 (unused)
start_32_2a           = $8727 = 34599          __words.asm:135
start_32_2c           = $8730 = 34608          __words.asm:145 (unused)
start_32_2f           = $8734 = 34612          __words.asm:151
start_3b              = $873D = 34621          __words.asm:161
start_3c              = $8747 = 34631          __words.asm:172 (unused)
start_3d              = $8763 = 34659          __words.asm:196 (unused)
start_40              = $876F = 34671          __words.asm:210
start_61_3e_62        = $8778 = 34680          __words.asm:222
start_61_3e_72        = $877F = 34687          __words.asm:232
start_61_62_3e_72     = $8786 = 34694          __words.asm:242
start_61_62_73        = $8791 = 34705          __words.asm:254 (unused)
start_61_6e_64        = $879A = 34714          __words.asm:262 (unused)
start_62_21           = $87A1 = 34721          __words.asm:273
start_62_3e_61        = $87A7 = 34727          __words.asm:282
start_62_3e_72        = $87AE = 34734          __words.asm:292
start_62_40           = $87B5 = 34741          __words.asm:302
start_62_72_65_61_6b  = $87BD = 34749          __words.asm:312
start_62_73_77_61_70  = $87C5 = 34757          __words.asm:322
start_63_6f_70_79     = $87D0 = 34768          __words.asm:334 (unused)
start_64_65_62_75_67  = $87F5 = 34805          __words.asm:366 (unused)
start_66_69_6c_6c     = $87FC = 34812          __words.asm:373 (unused)
start_68              = $8813 = 34835          __words.asm:395 (unused)
start_68_61_6c_74     = $881B = 34843          __words.asm:403 (unused)
start_68_65_72_65     = $8823 = 34851          __words.asm:413 (unused)
start_68_65_78_21     = $882B = 34859          __words.asm:421 (unused)
start_6d_6f_64        = $8832 = 34866          __words.asm:429 (unused)
start_6e_65_67_61_74_65 = $883B = 34875          __words.asm:438 (unused)
start_6f_72           = $8846 = 34886          __words.asm:452 (unused)
start_6f_72_21        = $8850 = 34896          __words.asm:464 (unused)
start_70_21           = $8859 = 34905          __words.asm:477
start_70_40           = $8865 = 34917          __words.asm:489 (unused)
start_70_61_72_61_6d_21 = $886F = 34927          __words.asm:499 (unused)
start_70_6f_70        = $8873 = 34931          __words.asm:505
start_70_75_73_68     = $887B = 34939          __words.asm:516
start_72_3e_61        = $8882 = 34946          __words.asm:526
start_72_3e_61_62     = $8889 = 34953          __words.asm:536
start_72_3e_62        = $8891 = 34961          __words.asm:547
start_73_77_61_70     = $8898 = 34968          __words.asm:557


total time: 0.0088 sec.
no errors
