// ==================================================================================================================

@word ,
		call	FARCompileWord

// ==================================================================================================================

@macro 	;
		ret

// ==================================================================================================================

@word 	c,
		ld 		a,l
		call 	FARCompileByte

// ==================================================================================================================

@word fill 							
		ex 		de,hl 								; B = value (DE) A = target (HL)
		ld 		bc,(Parameter) 						; count to do.
		ld 		a,b
		or 		c 									
		jr 		z,__fillExit 						; if count zero exit.
		push 	de
		push 	hl
__fillLoop:
		ld 		(hl),e
		inc 	hl
		dec 	bc
		ld 		a,b
		or 		c
		jr 		nz,__fillLoop
__fillExit:
		pop 	hl
		pop 	de

// ==================================================================================================================

@word h
		ex 		de,hl
		ld 		hl,Here

// ==================================================================================================================

@word here
		ex 		de,hl
		ld 		hl,(Here)

// ==================================================================================================================

@word copy 											; B (DE) = source A (HL) = target
		ld 		bc,(Parameter) 						; get count		
		ld 		a,b 								; zero check
		or 		c
		jr 		z,__copyExit

		push 	de 									; save A/B
		push 	hl 
		xor 	a 									; find direction. 
		sbc 	hl,de
		ld 		a,h
		add 	hl,de
		bit 	7,a 								; if +ve use LDDR
		jr 		z,__copy2

		ex 		de,hl 								; LDIR etc do (DE) <- (HL)
		ldir
		jr 		__copyExit

__copy2:		
		add 	hl,bc 								; add length to HL,DE, swap as LDDR does (DE) <- (HL)
		ex 		de,hl
		add 	hl,bc
		dec 	de 									; -1 to point to last byte
		dec 	hl
		lddr 

__copyExit:
		pop 	hl
		pop 	de

// ==================================================================================================================

@word hex! 	
				 									; DE = word, HL = pos
		call 	GFXWriteHexWord 					; write out the word

// ==================================================================================================================

@word halt

__haltz80:
		di
		halt
		jr 		__haltz80

// ==================================================================================================================

@word debug
		call 	DEBUGShow

// ==================================================================================================================

@macro break
		db 		$DD,$01
		